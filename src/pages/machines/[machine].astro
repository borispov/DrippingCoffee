---
import MachineInfoLayout from "@layouts/MachineInfoLayout.astro";
import { getCollection, getEntry } from "astro:content";

import machines from "@lib/machine/espresso.json";

import { unCamelCase } from "@lib/text";
import slugify from "@lib/slugify";

import { YouTube } from "astro-embed";

export function extractMachineData(machine) {
    return {
        identity: {
            brand: machine.brand,
            model: machine.model,
            latestVersion: "",
            officialLink: machine.additionalInfo?.links?.official || "",
            images: machine.images,
        },
        prices: {
            average: machine.priceUsd,
            US: undefined,
            EU: undefined,
        },
        technical: {
            boilerType: machine.boilerType,
            pid: machine.pid,
            pumpType: machine.pumpType,
            pressureGauge: machine.pressureGauge,
            adjustalePressure: machine.adjustablePressure,
            brewBoilerVolume: machine.brewBoiler,
            steamBoilerVolume: machine.steamBoiler,
            boilerMaterial: machine.boilerMaterial || "",
            waterSource: machine.tank.plumb,
            wattage: machine.wattage + " Watt",
            groupType: machine.groupType,
            reservoir: machine.reservoir,
            portaFilterDiameter: machine.portaFilterSize,
            dripTraySize: machine.dripTraySize || "",
            preInfusion: machine.preInfusion || "",
            warmUpTime: machine.warmUp || "",
        },
        dimensions: machine.dimensions,
        info: {
            reviews: machine.additionalInfo?.links?.reviews,
            notes: machine.additionalInfo?.notes,
        },
    };
}

export function getStaticPaths() {
    return machines.machines
        .map((m) => {
            return {
                params: {
                    machine: slugify(m.brand + " " + m.model),
                },
                props: {
                    machine: extractMachineData(m),
                },
            };
        })
        .filter((m) => m.props.machine.identity.images);
}

const { machine } = Astro.params;
const { identity, prices, technical, info, dimensions } = Astro.props.machine;

const machineName = machine;
const heroImageSource =
identity.images?.length && identity.images[0].includes('https') ? identity.images[0] : `/assets/machines/images/${identity.images[0]}`;
const machineNameCapitalized = `${identity.brand} ${identity.model}`;

const content = {
    title: `${identity.brand} ${identity.model} - Links, Reviews & Technical Details`,
    description: `${machineNameCapitalized} - Find out the specs, technical details, and reviews, to know everything you need about  ${machineNameCapitalized}`,
};

const findFirstVid = info?.reviews?.find((r) => r.link.includes("youtube.com"));

const machineEntry = await getEntry("machines", slugify(machineName))
let comparisons = null
const data = machineEntry && await machineEntry.render() || '';
const { Content } = data
---

<MachineInfoLayout content={content}>
    <div class="">
        <div class="mt-10 cluster">
            {
                identity.images?.length && (
                    <img
                        class=""
                        width="475"
                        src={heroImageSource}
                        alt={machineName}
                    />
                )
            }

            <table class="table table-zebra table-sm md:max-w-sm lg:max-w-lg">
                <thead class="bg-teal-800">
                    <th class="text-white" tabindex="0" role="columnheader"
                        >Property</th
                    >
                    <th class="text-white" tabindex="0" role="columnheader"
                        >Value</th
                    >
                </thead>
                <tbody>
                    {
                        Object.entries(technical)?.map((a) => {
                            let [k, v] = a;
                            if (v) {
                                return (
                                    <tr>
                                        <td>{unCamelCase(k)}</td>
                                        <td>{v}</td>
                                    </tr>
                                );
                            }
                        })
                    }
                </tbody>
            </table>
        </div>

        <div class="region flow">
             {machineEntry && 
                <Content />
             }
            {comparisons && 
                <h2>Comparisons</h2>
            }
            <h2>Summary</h2>
            {
                typeof info.notes == "string" ? (
                    <p>{info.notes}</p>
                ) : (
                    info.notes?.map((note) => <p>{note}</p>)
                )
            }
            <h3>Links:</h3>
            <ul class="list-disc">
                <li class="list-item">
                    <a target="_blank" href={identity?.officialLink}
                        >{machineNameCapitalized} - Official Link</a
                    >
                </li>
                {
                    info?.reviews?.map((review) => (
                        <li>
                            <a target="_blank" href={review.link}>
                                {review.name}
                            </a>
                        </li>
                    ))
                }
            </ul>

            {findFirstVid && <YouTube id={findFirstVid.link} />}
        </div>
    </div>
</MachineInfoLayout>

<style>
    img {
        max-width: 440px;
    }
    table {
        font-size: var(--step--2);
        border-radius: 1em;
        border-collapse: collapse;
        margin-block: var(--space-m-l);
        box-shadow: 0rem 0rem 1rem rgba(0, 0, 0, 0.18);
    }
    table th {
        border: 1px solid #d9d9d9;
        padding-left: var(--space-2xs);
        text-transform: uppercase;
        &:nth-of-type(1) {
            max-width: 50px;
        }
    }
</style>
